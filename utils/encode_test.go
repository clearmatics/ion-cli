// Copyright (c) 2018 Clearmatics Technologies Ltd

package utils_test

import (
	"encoding/hex"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/rlp"
	"math/big"
	"testing"

	"github.com/clearmatics/ion-cli/utils"
	"gotest.tools/assert"
)

var EXPECTEDRLPBLOCK = "f90256a06341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a053580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2da056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc94c808458ee45dab861d783010600846765746887676f312e372e33856c696e757800000000000000009f1efa1efa72af138c915966c639544a0255e6288e188c22ce9168c10dbe46da3d88b4aa065930119fb886210bf01a084fde5d3bc48d8aa38bca92e4fcc5215100a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"

var TestBlock = types.Header{
	ParentHash:  common.HexToHash("0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177"),
	UncleHash:   common.HexToHash("0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"),
	Coinbase:    common.HexToAddress("0x0000000000000000000000000000000000000000"),
	Root:        common.HexToHash("0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"),
	TxHash:      common.HexToHash("0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"),
	ReceiptHash: common.HexToHash("0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"),
	Bloom:       types.BytesToBloom(common.FromHex("0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")),
	Difficulty:  big.NewInt(0x2),
	Number:      big.NewInt(0x1),
	GasLimit:    0x47c94c,
	GasUsed:     0x0,
	Time:        0x58ee45da,
	Extra:       common.FromHex("0xd783010600846765746887676f312e372e33856c696e757800000000000000009f1efa1efa72af138c915966c639544a0255e6288e188c22ce9168c10dbe46da3d88b4aa065930119fb886210bf01a084fde5d3bc48d8aa38bca92e4fcc5215100"),
	MixDigest:   common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000"),
	Nonce:       types.EncodeNonce(0x0000000000000000),
}

var FakeBlock = types.Header{
	ParentHash:  common.HexToHash("0x3471555ab9a99528f02f9cdd8f0017fe2f56e01116acc4fe7f78aee900442f35"),
	UncleHash:   common.HexToHash("0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"),
	Coinbase:    common.HexToAddress("0x0000000000000000000000000000000000000000"),
	Root:        common.HexToHash("0xf526f481ffb6c3c56956d596f2b23e1f7ff17c810ba59efb579d9334a1765444"),
	TxHash:      common.HexToHash("0x07f36c7ad26564fa65daebda75a23dfa95d660199092510743f6c8527dd72586"),
	ReceiptHash: common.HexToHash("0x907121bec78b40e8256fac47867d955c560b321e93fc9f046f919ffb5e3823ff"),
	Bloom:       types.BytesToBloom(common.FromHex("0x
	Difficulty:  big.NewInt(0x2),
	Number:      big.NewInt(0x288c8e),
	GasLimit:    0x7295a1,
	GasUsed:     0x2bffa2,
	Time:        0x5b4f6b1d,
	Extra:       common.FromHex("0xd68301080d846765746886676f312e3130856c696e7578000000000000000000583a78dd245604e57368cb2688e42816ebc86eff73ee219dd96b8a56ea6392f75507e703203bc2cc624ce6820987cf9e8324dd1f9f67575502fe6060d723d0e100"),
	MixDigest:   common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000"),
	Nonce:       types.EncodeNonce(0x0000000000000000),
}

// EncodePrefix calculate prefix of the entire signed block
func Test_EncodePrefix(t *testing.T) {
	prefix, err := utils.EncodePrefix(TestBlock)
	assert.NilError(t, err)

	assert.Equal(t, "\x02\x14", string(prefix))
}

// EncodeExtraData calculate prefix of the extraData field without the signatures
func Test_EncodeExtraData(t *testing.T) {
	prefix, err := utils.EncodeExtraData(TestBlock)
	assert.NilError(t, err)

	assert.Equal(t, "\xa0", string(prefix))
}

// EncodeBlock rlp encodes the martialled JSON struct
func Test_EncodeBlock(t *testing.T) {
	rlpBlock, err := rlp.EncodeToBytes(TestBlock)
	assert.NilError(t, err)

	strRlpBlock := hex.EncodeToString(rlpBlock)
	assert.Equal(t, EXPECTEDRLPBLOCK, strRlpBlock)
}

func Test_EncodeSignedBlock(t *testing.T) {
	TestSigned := "f9025ca03471555ab9a99528f02f9cdd8f0017fe2f56e01116acc4fe7f78aee900442f35a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0f526f481ffb6c3c56956d596f2b23e1f7ff17c810ba59efb579d9334a1765444a007f36c7ad26564fa65daebda75a23dfa95d660199092510743f6c8527dd72586a0907121bec78b40e8256fac47867d955c560b321e93fc9f046f919ffb5e3823ffbc8e837295a1832bffa2845b4f6b1db861d68301080d846765746886676f312e3130856c696e7578000000000000000000583a78dd245604e57368cb2688e42816ebc86eff73ee219dd96b8a56ea6392f75507e703203bc2cc624ce6820987cf9e8324dd1f9f67575502fe6060d723d0e100a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"
	ExpectedSignedBytes, _ := hex.DecodeString(TestSigned)

	SignedBlock, err := utils.RlpEncodeBlock(&FakeBlock)

	assert.NilError(t, err)
	assert.Equal(t, ExpectedSignedBytes, SignedBlock)
}

func Test_EncodeUnsignedBlock(t *testing.T) {
	TestUnsigned := "f9021aa03471555ab9a99528f02f9cdd8f0017fe2f56e01116acc4fe7f78aee900442f35a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0f526f481ffb6c3c56956d596f2b23e1f7ff17c810ba59efb579d9334a1765444a007f36c7ad26564fa65daebda75a23dfa95d660199092510743f6c8527dd72586a0907121bec78b40e8256fac47867d955c560b321e93fc9f046f919ffb5e3823ffbc8e837295a1832bffa2845b4f6b1da0d68301080d846765746886676f312e3130856c696e7578000000000000000000a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"
	ExpectedUnsignedBytes, _ := hex.DecodeString(TestUnsigned)

	UnsignedBlock, err := utils.RlpEncodeUnsignedBlock(&FakeBlock)

	assert.NilError(t, err)
	assert.Equal(t, ExpectedUnsignedBytes, UnsignedBlock)

}
